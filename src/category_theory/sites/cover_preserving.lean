/-
Copyright (c) 2021 Andrew Yang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Andrew Yang
-/
import category_theory.sites.sheaf

/-!
# Cover-preserving functors between sites.

We define cover-preserving functors between sites as functors that push covering sieves to
covering sieves. A cover-preserving and compatible-preserving functor `G : C ‚•§ D` then pulls
sheaves on `D` back to sheaves on `C` via `G.op ‚ãô -`.

## Main definitions

* `category_theory.cover_preserving`: a functor between sites is cover-preserving if it
pushes covering sieves to covering sieves
* `category_theory.compatible_preserving`: a functor between sites is compatible-preserving
if it pushes compatible families of elements to compatible families.
* `category_theory.pullback_sheaf` : the pullback of a sheaf along a cover-preserving and
compatible-preserving functor.
* `category_theory.sites.pullback` : the induced functor `Sheaf K A ‚•§ Sheaf J A` for a
cover-preserving and compatible-preserving functor `G : (C, J) ‚•§ (D, K)`.

## Main results

- `category_theory.sites.whiskering_left_is_sheaf_of_cover_preserving`: If `G : C ‚•§ D` is
cover-preserving and compatible-preserving, then `G ‚ãô -` (`u·µñ`) as a functor
`(D·µí·µñ ‚•§ A) ‚•§ (C·µí·µñ ‚•§ A)` of presheaves maps sheaves to sheaves.

## References

* [Elephant]: *Sketches of an Elephant*, P. T. Johnstone: C2.3.
* https://stacks.math.columbia.edu/tag/00WW

-/

universes w v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ
noncomputable theory

open category_theory
open opposite
open category_theory.presieve.family_of_elements
open category_theory.presieve
open category_theory.limits

namespace category_theory
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]
variables {A : Type u‚ÇÉ} [category.{v‚ÇÉ} A]
variables (J : grothendieck_topology C) (K : grothendieck_topology D)
variables {L : grothendieck_topology A}

/--
A functor `G : (C, J) ‚•§ (D, K)` between sites is *cover-preserving*
if for all covering sieves `R` in `C`, `R.pushforward_functor G` is a covering sieve in `D`.
-/
@[nolint has_inhabited_instance]
structure cover_preserving (G : C ‚•§ D) : Prop :=
(cover_preserve : ‚àÄ {U : C} {S : sieve U} (hS : S ‚àà J U), S.functor_pushforward G ‚àà K (G.obj U))

/-- The identity functor on a site is cover-preserving. -/
lemma id_cover_preserving : cover_preserving J J (ùü≠ _) := ‚ü®Œª U S hS, by simpa using hS‚ü©

variables (J) (K)

/-- The composition of two cover-preserving functors is cover-preserving. -/
lemma cover_preserving.comp {F} (hF : cover_preserving J K F) {G} (hG : cover_preserving K L G) :
  cover_preserving J L (F ‚ãô G) := ‚ü®Œª U S hS,
begin
  rw sieve.functor_pushforward_comp,
  exact hG.cover_preserve (hF.cover_preserve hS)
end‚ü©

/--
A functor `G : (C, J) ‚•§ (D, K)` between sites is called compatible preserving if for each
compatible family of elements at `C` and valued in `G.op ‚ãô ‚Ñ±`, and each commuting diagram
`f‚ÇÅ ‚â´ G.map g‚ÇÅ = f‚ÇÇ ‚â´ G.map g‚ÇÇ`, `x g‚ÇÅ` and `x g‚ÇÇ` coincide when restricted via `f·µ¢`.
This is actually stronger than merely preserving compatible families because of the definition of
`functor_pushforward` used.
-/
@[nolint has_inhabited_instance]
structure compatible_preserving (K : grothendieck_topology D) (G : C ‚•§ D) : Prop :=
(compatible :
  ‚àÄ (‚Ñ± : SheafOfTypes.{w} K) {Z} {T : presieve Z}
    {x : family_of_elements (G.op ‚ãô ‚Ñ±.val) T} (h : x.compatible)
    {Y‚ÇÅ Y‚ÇÇ} {X} (f‚ÇÅ : X ‚ü∂ G.obj Y‚ÇÅ) (f‚ÇÇ : X ‚ü∂ G.obj Y‚ÇÇ) {g‚ÇÅ : Y‚ÇÅ ‚ü∂ Z} {g‚ÇÇ : Y‚ÇÇ ‚ü∂ Z}
    (hg‚ÇÅ : T g‚ÇÅ) (hg‚ÇÇ : T g‚ÇÇ) (eq : f‚ÇÅ ‚â´ G.map g‚ÇÅ = f‚ÇÇ ‚â´ G.map g‚ÇÇ),
      ‚Ñ±.val.map f‚ÇÅ.op (x g‚ÇÅ hg‚ÇÅ) = ‚Ñ±.val.map f‚ÇÇ.op (x g‚ÇÇ hg‚ÇÇ))

variables {J K} {G : C ‚•§ D} (hG : compatible_preserving.{w} K G) (‚Ñ± : SheafOfTypes.{w} K) {Z : C}
variables {T : presieve Z} {x : family_of_elements (G.op ‚ãô ‚Ñ±.val) T} (h : x.compatible)

include h hG

/-- `compatible_preserving` functors indeed preserve compatible families. -/
lemma presieve.family_of_elements.compatible.functor_pushforward :
  (x.functor_pushforward G).compatible :=
begin
  rintros Z‚ÇÅ Z‚ÇÇ W g‚ÇÅ g‚ÇÇ f‚ÇÅ' f‚ÇÇ' H‚ÇÅ H‚ÇÇ eq,
  unfold family_of_elements.functor_pushforward,
  rcases get_functor_pushforward_structure H‚ÇÅ with ‚ü®X‚ÇÅ, f‚ÇÅ, h‚ÇÅ, hf‚ÇÅ, rfl‚ü©,
  rcases get_functor_pushforward_structure H‚ÇÇ with ‚ü®X‚ÇÇ, f‚ÇÇ, h‚ÇÇ, hf‚ÇÇ, rfl‚ü©,
  suffices : ‚Ñ±.val.map (g‚ÇÅ ‚â´ h‚ÇÅ).op (x f‚ÇÅ hf‚ÇÅ) = ‚Ñ±.val.map (g‚ÇÇ ‚â´ h‚ÇÇ).op (x f‚ÇÇ hf‚ÇÇ),
    simpa using this,
  apply hG.compatible ‚Ñ± h _ _ hf‚ÇÅ hf‚ÇÇ,
  simpa using eq
end

@[simp] lemma compatible_preserving.apply_map {Y : C} {f : Y ‚ü∂ Z} (hf : T f) :
  x.functor_pushforward G (G.map f) (image_mem_functor_pushforward G T hf) = x f hf :=
begin
  unfold family_of_elements.functor_pushforward,
  rcases e‚ÇÅ : get_functor_pushforward_structure (image_mem_functor_pushforward G T hf) with
    ‚ü®X, g, f', hg, eq‚ü©,
  simpa using hG.compatible ‚Ñ± h f' (ùüô _) hg hf (by simp[eq])
end

omit h hG

/--
If `G` is cover-preserving and compatible-preserving,
then `G.op ‚ãô _` pulls sheaves back to sheaves.

This result is basically https://stacks.math.columbia.edu/tag/00WW.
-/
theorem pullback_is_sheaf_of_cover_preserving {G : C ‚•§ D} (hG‚ÇÅ : compatible_preserving.{v‚ÇÉ} K G)
  (hG‚ÇÇ : cover_preserving J K G) (‚Ñ± : Sheaf K A) :
  presheaf.is_sheaf J (G.op ‚ãô ‚Ñ±.val) :=
begin
  intros X U S hS x hx,
  change family_of_elements (G.op ‚ãô ‚Ñ±.val ‚ãô coyoneda.obj (op X)) _ at x,
  let H := ‚Ñ±.2 X _ (hG‚ÇÇ.cover_preserve hS),
  let hx' := hx.functor_pushforward hG‚ÇÅ (sheaf_over ‚Ñ± X),
  split, swap,
  { apply H.amalgamate (x.functor_pushforward G),
    exact hx' },
  split,
  { intros V f hf,
    convert H.is_amalgamation hx' (G.map f) (image_mem_functor_pushforward G S hf),
    rw hG‚ÇÅ.apply_map (sheaf_over ‚Ñ± X) hx },
  { intros y hy,
    refine H.is_separated_for _ y _ _
      (H.is_amalgamation (hx.functor_pushforward hG‚ÇÅ (sheaf_over ‚Ñ± X))),
    rintros V f ‚ü®Z, f', g', h, rfl‚ü©,
    erw family_of_elements.comp_of_compatible (S.functor_pushforward G)
      hx' (image_mem_functor_pushforward G S h) g',
    simp [hG‚ÇÅ.apply_map (sheaf_over ‚Ñ± X) hx h, ‚Üêhy f' h] }
end

/-- The pullback of a sheaf along a cover-preserving and compatible-preserving functor. -/
def pullback_sheaf {G : C ‚•§ D} (hG‚ÇÅ : compatible_preserving K G)
  (hG‚ÇÇ : cover_preserving J K G) (‚Ñ± : Sheaf K A) : Sheaf J A :=
‚ü®G.op ‚ãô ‚Ñ±.val, pullback_is_sheaf_of_cover_preserving hG‚ÇÅ hG‚ÇÇ ‚Ñ±‚ü©

variable (A)

/--
The induced functor from `Sheaf K A ‚•§ Sheaf J A` given by `G.op ‚ãô _`
if `G` is cover-preserving and compatible-preserving.
-/
@[simps] def sites.pullback {G : C ‚•§ D} (hG‚ÇÅ : compatible_preserving K G)
  (hG‚ÇÇ : cover_preserving J K G) : Sheaf K A ‚•§ Sheaf J A :=
{ obj := Œª ‚Ñ±, pullback_sheaf hG‚ÇÅ hG‚ÇÇ ‚Ñ±,
  map := Œª _ _ f, (((whiskering_left _ _ _).obj G.op)).map f,
  map_id' := Œª ‚Ñ±, (((whiskering_left _ _ _).obj G.op)).map_id ‚Ñ±.val,
  map_comp' := Œª _ _ _ f g, (((whiskering_left _ _ _).obj G.op)).map_comp f g }

end category_theory
