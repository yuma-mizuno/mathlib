/-
Copyright (c) 2021 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot
-/
import measure_theory.integral.set_integral
import analysis.calculus.mean_value

/-!
# Derivatives of integrals depending on parameters

A parametric integral is a function with shape `f = Œª x : H, ‚à´ a : Œ±, F x a ‚àÇŒº` for some
`F : H ‚Üí Œ± ‚Üí E`, where `H` and `E` are normed spaces and `Œ±` is a measured space with measure `Œº`.

We already know from `continuous_of_dominated` in `measure_theory.integral.bochner` how to
guarantee that `f` is continuous using the dominated convergence theorem. In this file,
we want to express the derivative of `f` as the integral of the derivative of `F` with respect
to `x`.


## Main results

As explained above, all results express the derivative of a parametric integral as the integral of
a derivative. The variations come from the assumptions and from the different ways of expressing
derivative, especially Fr√©chet derivatives vs elementary derivative of function of one real
variable.

* `has_fderiv_at_of_dominated_loc_of_lip`: this version assumes
    `F x` is ae-measurable for x near `x‚ÇÄ`, `F x‚ÇÄ` is integrable,
    `Œª x, F x a` has derivative `F' a : H ‚ÜíL[‚Ñù] E` at `x‚ÇÄ` which is ae-measurable,
    `Œª x, F x a` is locally Lipschitz near `x‚ÇÄ` for almost every `a`, with a Lipschitz bound which
    is integrable with respect to `a`. A subtle point is that the "near x‚ÇÄ" in the last condition
    has to be uniform in `a`. This is controlled by a positive number `Œµ`.

* `has_fderiv_at_of_dominated_of_fderiv_le`: this version assume `Œª x, F x a` has derivative
    `F' x a` for `x` near `x‚ÇÄ` and `F' x` is bounded by an integrable function independent from
    `x` near `x‚ÇÄ`.


`has_deriv_at_of_dominated_loc_of_lip` and `has_deriv_at_of_dominated_loc_of_deriv_le ` are versions
of the above two results that assume `H = ‚Ñù` and use the high-school derivative `deriv` instead of
Fr√©chet derivative `fderiv`.
-/

noncomputable theory

open topological_space measure_theory filter metric
open_locale topological_space filter

variables {Œ± : Type*} [measurable_space Œ±] {Œº : measure Œ±}
          {E : Type*} [normed_group E] [normed_space ‚Ñù E]
          [complete_space E] [second_countable_topology E]
          [measurable_space E] [borel_space E]
          {H : Type*} [normed_group H] [normed_space ‚Ñù H]
          [second_countable_topology $ H ‚ÜíL[‚Ñù] E]

/-- Differentiation under integral of `x ‚Ü¶ ‚à´ F x a` at a given point `x‚ÇÄ`, assuming
`F x‚ÇÄ` is integrable, `x ‚Ü¶ F x a` is locally Lipschitz on a ball around `x‚ÇÄ` for ae `a` with
integrable Lipschitz bound (with a ball radius independent of `a`), and `F x` is
ae-measurable for `x` in the same ball. See `has_fderiv_at_of_dominated_loc_of_lip` for a
slightly more general version. -/
lemma has_fderiv_at_of_dominated_loc_of_lip' {F : H ‚Üí Œ± ‚Üí E} {F' : Œ± ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {bound : Œ± ‚Üí ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ae_measurable (F x) Œº)
  (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : ae_measurable F' Œº)
  (h_lipsch : ‚àÄ·µê a ‚àÇŒº, lipschitz_on_with (real.nnabs $ bound a) (Œª x, F x a) (ball x‚ÇÄ Œµ))
  (bound_integrable : integrable (bound : Œ± ‚Üí ‚Ñù) Œº)
  (h_diff : ‚àÄ·µê a ‚àÇŒº, has_fderiv_at (Œª x, F x a) (F' a) x‚ÇÄ) :
  integrable F' Œº ‚àß has_fderiv_at (Œª x, ‚à´ a, F x a ‚àÇŒº) (‚à´ a, F' a ‚àÇŒº) x‚ÇÄ :=
begin
  have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos,
  have nneg : ‚àÄ x, 0 ‚â§ ‚à•x - x‚ÇÄ‚à•‚Åª¬π := Œª x, inv_nonneg.mpr (norm_nonneg _) ,
  set b : Œ± ‚Üí ‚Ñù := Œª a, |bound a|,
  have b_int : integrable b Œº := bound_integrable.norm,
  have b_nonneg : ‚àÄ a, 0 ‚â§ b a := Œª a, abs_nonneg _,
  have hF_int' : ‚àÄ x ‚àà ball x‚ÇÄ Œµ, integrable (F x) Œº,
  { intros x x_in,
    have : ‚àÄ·µê a ‚àÇŒº, ‚à•F x‚ÇÄ a - F x a‚à• ‚â§ Œµ * ‚à•(bound a : ‚Ñù)‚à•,
    { apply h_lipsch.mono,
      intros a ha,
      rw lipschitz_on_with_iff_norm_sub_le at ha,
      apply (ha x‚ÇÄ x‚ÇÄ_in x x_in).trans,
      rw [mul_comm, real.coe_nnabs, real.norm_eq_abs],
      rw [mem_ball, dist_eq_norm, norm_sub_rev] at x_in,
      exact mul_le_mul_of_nonneg_right (le_of_lt x_in) (abs_nonneg  _) },
    exact integrable_of_norm_sub_le (hF_meas x x_in) hF_int
      (integrable.const_mul bound_integrable.norm Œµ) this },
  have hF'_int : integrable F' Œº,
  { have : ‚àÄ·µê a ‚àÇŒº, ‚à•F' a‚à• ‚â§ b a,
    { apply (h_diff.and h_lipsch).mono,
      rintros a ‚ü®ha_diff, ha_lip‚ü©,
      exact ha_diff.le_of_lip (ball_mem_nhds _ Œµ_pos) ha_lip },
    exact b_int.mono' hF'_meas this },
  refine ‚ü®hF'_int, _‚ü©,
  have h_ball: ball x‚ÇÄ Œµ ‚àà ùìù x‚ÇÄ := ball_mem_nhds x‚ÇÄ Œµ_pos,
  have : ‚àÄ·∂† x in ùìù x‚ÇÄ,
      ‚à•x - x‚ÇÄ‚à•‚Åª¬π * ‚à•‚à´ a, F x a ‚àÇŒº - ‚à´ a, F x‚ÇÄ a ‚àÇŒº - (‚à´ a, F' a ‚àÇŒº) (x - x‚ÇÄ)‚à• =
       ‚à•‚à´ a, ‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a  - F' a (x - x‚ÇÄ)) ‚àÇŒº‚à•,
  { apply mem_of_superset (ball_mem_nhds _ Œµ_pos),
    intros x x_in,
    rw [set.mem_set_of_eq, ‚Üê norm_smul_of_nonneg (nneg _), integral_smul,
        integral_sub, integral_sub, ‚Üê continuous_linear_map.integral_apply hF'_int],
    exacts [hF_int' x x_in, hF_int, (hF_int' x x_in).sub hF_int,
            hF'_int.apply_continuous_linear_map _] },
  rw [has_fderiv_at_iff_tendsto, tendsto_congr' this, ‚Üê tendsto_zero_iff_norm_tendsto_zero,
      ‚Üê show ‚à´ (a : Œ±), ‚à•x‚ÇÄ - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x‚ÇÄ a - F x‚ÇÄ a - (F' a) (x‚ÇÄ - x‚ÇÄ)) ‚àÇŒº = 0, by simp],
  apply tendsto_integral_filter_of_dominated_convergence,
  { filter_upwards [h_ball],
    intros x x_in,
    apply ae_measurable.const_smul,
    exact ((hF_meas _ x_in).sub (hF_meas _ x‚ÇÄ_in)).sub (hF'_meas.apply_continuous_linear_map _) },
  { simp [measurable_const] },
  { apply mem_of_superset h_ball,
    intros x hx,
    apply (h_diff.and h_lipsch).mono,
    rintros a ‚ü®ha_deriv, ha_bound‚ü©,
    show ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a - F' a (x - x‚ÇÄ))‚à• ‚â§ b a + ‚à•F' a‚à•,
    replace ha_bound : ‚à•F x a - F x‚ÇÄ a‚à• ‚â§ b a * ‚à•x - x‚ÇÄ‚à•,
    { rw lipschitz_on_with_iff_norm_sub_le at ha_bound,
      exact ha_bound _ hx _ x‚ÇÄ_in },
    calc ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a - F' a (x - x‚ÇÄ))‚à•
    = ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a) - ‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ F' a (x - x‚ÇÄ)‚à• : by rw smul_sub
    ... ‚â§  ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a)‚à• + ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ F' a (x - x‚ÇÄ)‚à• : norm_sub_le _ _
    ... =  ‚à•x - x‚ÇÄ‚à•‚Åª¬π * ‚à•F x a - F x‚ÇÄ a‚à• + ‚à•x - x‚ÇÄ‚à•‚Åª¬π * ‚à•F' a (x - x‚ÇÄ)‚à• :
                                 by { rw [norm_smul_of_nonneg, norm_smul_of_nonneg] ; exact nneg _}
    ... ‚â§  ‚à•x - x‚ÇÄ‚à•‚Åª¬π * (b a * ‚à•x - x‚ÇÄ‚à•) + ‚à•x - x‚ÇÄ‚à•‚Åª¬π * (‚à•F' a‚à• * ‚à•x - x‚ÇÄ‚à•) : add_le_add _ _
    ... ‚â§ b a + ‚à•F' a‚à• : _,
    exact mul_le_mul_of_nonneg_left ha_bound (nneg _),
    apply mul_le_mul_of_nonneg_left ((F' a).le_op_norm _) (nneg _),
    by_cases h : ‚à•x - x‚ÇÄ‚à• = 0,
    { simpa [h] using add_nonneg (b_nonneg a) (norm_nonneg (F' a)) },
    { field_simp [h] } },
  { exact b_int.add hF'_int.norm },
  { apply h_diff.mono,
    intros a ha,
    suffices : tendsto (Œª x, ‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a - F' a (x - x‚ÇÄ))) (ùìù x‚ÇÄ) (ùìù 0),
    by simpa,
    rw tendsto_zero_iff_norm_tendsto_zero,
    have : (Œª x, ‚à•x - x‚ÇÄ‚à•‚Åª¬π * ‚à•F x a - F x‚ÇÄ a - F' a (x - x‚ÇÄ)‚à•) =
            Œª x, ‚à•‚à•x - x‚ÇÄ‚à•‚Åª¬π ‚Ä¢ (F x a - F x‚ÇÄ a - F' a (x - x‚ÇÄ))‚à•,
    { ext x,
      rw norm_smul_of_nonneg (nneg _) },
    rwa [has_fderiv_at_iff_tendsto, this] at ha },
end

/-- Differentiation under integral of `x ‚Ü¶ ‚à´ F x a` at a given point `x‚ÇÄ`, assuming
`F x‚ÇÄ` is integrable, `x ‚Ü¶ F x a` is locally Lipschitz on a ball around `x‚ÇÄ` for ae `a`
(with a ball radius independent of `a`) with integrable Lipschitz bound, and `F x` is ae-measurable
for `x` in a possibly smaller neighborhood of `x‚ÇÄ`. -/
lemma has_fderiv_at_of_dominated_loc_of_lip {F : H ‚Üí Œ± ‚Üí E} {F' : Œ± ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {bound : Œ± ‚Üí ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) Œº)
  (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : ae_measurable F' Œº)
  (h_lip : ‚àÄ·µê a ‚àÇŒº, lipschitz_on_with (real.nnabs $ bound a) (Œª x, F x a) (ball x‚ÇÄ Œµ))
  (bound_integrable : integrable (bound : Œ± ‚Üí ‚Ñù) Œº)
  (h_diff : ‚àÄ·µê a ‚àÇŒº, has_fderiv_at (Œª x, F x a) (F' a) x‚ÇÄ) :
  integrable F' Œº ‚àß has_fderiv_at (Œª x, ‚à´ a, F x a ‚àÇŒº) (‚à´ a, F' a ‚àÇŒº) x‚ÇÄ :=
begin
  obtain ‚ü®Œµ', Œµ'_pos, h'‚ü© : ‚àÉ Œµ' > 0, ‚àÄ x ‚àà ball x‚ÇÄ Œµ', ae_measurable (F x) Œº,
  by simpa using nhds_basis_ball.eventually_iff.mp hF_meas,
  set Œ¥ := min Œµ Œµ',
  have Œ¥_pos : 0 < Œ¥ := lt_min Œµ_pos Œµ'_pos,
  replace h' : ‚àÄ x, x ‚àà ball x‚ÇÄ Œ¥ ‚Üí ae_measurable (F x) Œº,
  { intros x x_in,
    exact h' _ (ball_subset_ball (min_le_right Œµ Œµ') x_in) },
  replace h_lip : ‚àÄ·µê (a : Œ±) ‚àÇŒº, lipschitz_on_with (real.nnabs $ bound a) (Œª x, F x a) (ball x‚ÇÄ Œ¥),
  { apply h_lip.mono,
    intros a lip,
    exact lip.mono (ball_subset_ball $ min_le_left Œµ Œµ') },
  apply has_fderiv_at_of_dominated_loc_of_lip' Œ¥_pos ; assumption
end

/-- Differentiation under integral of `x ‚Ü¶ ‚à´ F x a` at a given point `x‚ÇÄ`, assuming
`F x‚ÇÄ` is integrable, `x ‚Ü¶ F x a` is differentiable on a ball around `x‚ÇÄ` for ae `a` with
derivative norm uniformly bounded by an integrable function (the ball radius is independent of `a`),
and `F x` is ae-measurable for `x` in a possibly smaller neighborhood of `x‚ÇÄ`. -/
lemma has_fderiv_at_of_dominated_of_fderiv_le {F : H ‚Üí Œ± ‚Üí E} {F' : H ‚Üí Œ± ‚Üí (H ‚ÜíL[‚Ñù] E)} {x‚ÇÄ : H}
  {bound : Œ± ‚Üí ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) Œº)
  (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : ae_measurable (F' x‚ÇÄ) Œº)
  (h_bound : ‚àÄ·µê a ‚àÇŒº, ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚à•F' x a‚à• ‚â§ bound a)
  (bound_integrable : integrable (bound : Œ± ‚Üí ‚Ñù) Œº)
  (h_diff : ‚àÄ·µê a ‚àÇŒº, ‚àÄ x ‚àà ball x‚ÇÄ Œµ, has_fderiv_at (Œª x, F x a) (F' x a) x) :
  has_fderiv_at (Œª x, ‚à´ a, F x a ‚àÇŒº) (‚à´ a, F' x‚ÇÄ a ‚àÇŒº) x‚ÇÄ :=
begin
  have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos,
  have diff_x‚ÇÄ : ‚àÄ·µê a ‚àÇŒº, has_fderiv_at (Œª x, F x a) (F' x‚ÇÄ a) x‚ÇÄ :=
    h_diff.mono (Œª a ha, ha x‚ÇÄ x‚ÇÄ_in),
  have : ‚àÄ·µê a ‚àÇŒº, lipschitz_on_with (real.nnabs (bound a)) (Œª x, F x a) (ball x‚ÇÄ Œµ),
  { apply (h_diff.and h_bound).mono,
    rintros a ‚ü®ha_deriv, ha_bound‚ü©,
    refine (convex_ball _ _).lipschitz_on_with_of_nnnorm_has_fderiv_within_le
      (Œª x x_in, (ha_deriv x x_in).has_fderiv_within_at) (Œª x x_in, _),
    rw [‚Üê nnreal.coe_le_coe, coe_nnnorm, real.coe_nnabs],
    exact (ha_bound x x_in).trans (le_abs_self _) },
  exact (has_fderiv_at_of_dominated_loc_of_lip Œµ_pos hF_meas hF_int
                                               hF'_meas this bound_integrable diff_x‚ÇÄ).2
end

/-- Derivative under integral of `x ‚Ü¶ ‚à´ F x a` at a given point `x‚ÇÄ : ‚Ñù`, assuming
`F x‚ÇÄ` is integrable, `x ‚Ü¶ F x a` is locally Lipschitz on an interval around `x‚ÇÄ` for ae `a`
(with interval radius independent of `a`) with integrable Lipschitz bound, and `F x` is
ae-measurable for `x` in a possibly smaller neighborhood of `x‚ÇÄ`. -/
lemma has_deriv_at_of_dominated_loc_of_lip {F : ‚Ñù ‚Üí Œ± ‚Üí E} {F' : Œ± ‚Üí E} {x‚ÇÄ : ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) Œº)
  (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : ae_measurable F' Œº) {bound : Œ± ‚Üí ‚Ñù}
  (h_lipsch : ‚àÄ·µê a ‚àÇŒº, lipschitz_on_with (real.nnabs $ bound a) (Œª x, F x a) (ball x‚ÇÄ Œµ))
  (bound_integrable : integrable (bound : Œ± ‚Üí ‚Ñù) Œº)
  (h_diff : ‚àÄ·µê a ‚àÇŒº, has_deriv_at (Œª x, F x a) (F' a) x‚ÇÄ) :
  (integrable F' Œº) ‚àß has_deriv_at (Œª x, ‚à´ a, F x a ‚àÇŒº) (‚à´ a, F' a ‚àÇŒº) x‚ÇÄ :=
begin
  have hm := (continuous_linear_map.smul_rightL ‚Ñù ‚Ñù E 1).continuous.measurable.comp_ae_measurable
             hF'_meas,
  cases has_fderiv_at_of_dominated_loc_of_lip Œµ_pos hF_meas hF_int hm h_lipsch bound_integrable
    h_diff with hF'_int key,
  replace hF'_int : integrable F' Œº,
  { rw [‚Üê integrable_norm_iff hm] at hF'_int,
    simpa only [integrable_norm_iff, hF'_meas, one_mul, norm_one,
                continuous_linear_map.norm_smul_rightL_apply] using hF'_int},
  refine ‚ü®hF'_int, _‚ü©,
  simp_rw has_deriv_at_iff_has_fderiv_at at h_diff ‚ä¢,
  rwa continuous_linear_map.integral_comp_comm _ hF'_int at key,
  all_goals { apply_instance, },
end

/-- Derivative under integral of `x ‚Ü¶ ‚à´ F x a` at a given point `x‚ÇÄ : ‚Ñù`, assuming
`F x‚ÇÄ` is integrable, `x ‚Ü¶ F x a` is differentiable on an interval around `x‚ÇÄ` for ae `a`
(with interval radius independent of `a`) with derivative uniformly bounded by an integrable
function, and `F x` is ae-measurable for `x` in a possibly smaller neighborhood of `x‚ÇÄ`. -/
lemma has_deriv_at_of_dominated_loc_of_deriv_le {F : ‚Ñù ‚Üí Œ± ‚Üí E} {F' : ‚Ñù ‚Üí Œ± ‚Üí E} {x‚ÇÄ : ‚Ñù}
  {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ)
  (hF_meas : ‚àÄ·∂† x in ùìù x‚ÇÄ, ae_measurable (F x) Œº)
  (hF_int : integrable (F x‚ÇÄ) Œº)
  (hF'_meas : ae_measurable (F' x‚ÇÄ) Œº)
  {bound : Œ± ‚Üí ‚Ñù}
  (h_bound : ‚àÄ·µê a ‚àÇŒº, ‚àÄ x ‚àà ball x‚ÇÄ Œµ, ‚à•F' x a‚à• ‚â§ bound a)
  (bound_integrable : integrable bound Œº)
  (h_diff : ‚àÄ·µê a ‚àÇŒº, ‚àÄ x ‚àà ball x‚ÇÄ Œµ, has_deriv_at (Œª x, F x a) (F' x a) x) :
  (integrable (F' x‚ÇÄ) Œº) ‚àß has_deriv_at (Œªn, ‚à´ a, F n a ‚àÇŒº) (‚à´ a, F' x‚ÇÄ a ‚àÇŒº) x‚ÇÄ :=
begin
  have x‚ÇÄ_in : x‚ÇÄ ‚àà ball x‚ÇÄ Œµ := mem_ball_self Œµ_pos,
  have diff_x‚ÇÄ : ‚àÄ·µê a ‚àÇŒº, has_deriv_at (Œª x, F x a) (F' x‚ÇÄ a) x‚ÇÄ :=
    h_diff.mono (Œª a ha, ha x‚ÇÄ x‚ÇÄ_in),
  have : ‚àÄ·µê a ‚àÇŒº, lipschitz_on_with (real.nnabs (bound a)) (Œª (x : ‚Ñù), F x a) (ball x‚ÇÄ Œµ),
  { apply (h_diff.and h_bound).mono,
    rintros a ‚ü®ha_deriv, ha_bound‚ü©,
    refine (convex_ball _ _).lipschitz_on_with_of_nnnorm_has_deriv_within_le
      (Œª x x_in, (ha_deriv x x_in).has_deriv_within_at) (Œª x x_in, _),
    rw [‚Üê nnreal.coe_le_coe, coe_nnnorm, real.coe_nnabs],
    exact (ha_bound x x_in).trans (le_abs_self _) },
  exact has_deriv_at_of_dominated_loc_of_lip Œµ_pos hF_meas hF_int hF'_meas this
        bound_integrable diff_x‚ÇÄ
end
